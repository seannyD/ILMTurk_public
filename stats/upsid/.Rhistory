table(signals_MT$gen,signals_MT$chain2)
table(signals_MT$gen,signals_MT$curvature)
dim(sigx3)
gen = 8
curvx = 0
sigx2 = sigx[sigx$curvature==curvx,]
sigx3 = sigx2[sigx2$gen==gen,]
chains = unique(sigx3$chain2)
chains
sigx2 = sigx[sigx$curvature==curvx,]
dim(sigx2)
table(sigx2$gen)
i = 1
sigx = data.list[[i]]
sigx2 = sigx[sigx$curvature==curvx,]
sigx3 = sigx2[sigx2$gen==gen,]
chains = unique(sigx3$chain2)
chains
dx = stability.accross.chains[stability.accross.chains$run=="MT" & stability.accross.chains$chainA != "chain -174 log2.csv 0.4" & stability.accross.chains$chainB != "chain -174 log2.csv 0.4",]
dx = dx[complete.cases(dx),]
summary(lm(distance~curvature*gen, data=dx))
m0 = lmer(distance~ 1 + (1|chainA) + (1|chainB),data=dx)
m1 = lmer(distance~ curvature + (1|chainA) + (1|chainB),data=dx)
m2 = lmer(distance~ curvature+gen + (1|chainA) + (1|chainB),data=dx)
m3 = lmer(distance~ curvature*gen + (1|chainA) + (1|chainB),data=dx)
anova(m0,m1,m2,m3)
dx = stability.accross.chains[stability.accross.chains$run=="MT" ,]#=& stability.accross.chains$chainA != "chain -174 log2.csv 0.4" & stability.accross.chains$chainB != "chain -174 log2.csv 0.4",]
dx = dx[complete.cases(dx),]
summary(lm(distance~curvature*gen, data=dx))
m0 = lmer(distance~ 1 + (1|chainA) + (1|chainB),data=dx)
m1 = lmer(distance~ curvature + (1|chainA) + (1|chainB),data=dx)
m2 = lmer(distance~ curvature+gen + (1|chainA) + (1|chainB),data=dx)
m3 = lmer(distance~ curvature*gen + (1|chainA) + (1|chainB),data=dx)
anova(m0,m1,m2,m3)
par(mfrow=c(1,1))
plotmeans(distance~curvature,data=dx)
par(mfrow=c(3,2))
for(cx in sort(unique(dx$curvature))){
plotmeans(distance~gen,  data = dx[dx$curvature==cx,],ylim=range(dx$distance))
}
dx = dx[dx$distance< (mean(dx$distance)-(2*sd(dx$distance))),]
summary(lm(distance~curvature*gen, data=dx))
m0 = lmer(distance~ 1 + (1|chainA) + (1|chainB),data=dx)
m1 = lmer(distance~ curvature + (1|chainA) + (1|chainB),data=dx)
m2 = lmer(distance~ curvature+gen + (1|chainA) + (1|chainB),data=dx)
m3 = lmer(distance~ curvature*gen + (1|chainA) + (1|chainB),data=dx)
anova(m0,m1,m2,m3)
par(mfrow=c(1,1))
plotmeans(distance~curvature,data=dx)
par(mfrow=c(3,2))
for(cx in sort(unique(dx$curvature))){
plotmeans(distance~gen,  data = dx[dx$curvature==cx,],ylim=range(dx$distance))
}
dx = stability.accross.chains[stability.accross.chains$run=="MT" ,]#=& stability.accross.chains$chainA != "chain -174 log2.csv 0.4" & stability.accross.chains$chainB != "chain -174 log2.csv 0.4",]
dx = dx[complete.cases(dx),]
dx$distance
(mean(dx$distance)-(2*sd(dx$distance)))
(mean(dx$distance)+(2*sd(dx$distance)))
dx = stability.accross.chains[stability.accross.chains$run=="MT" ,]#=& stability.accross.chains$chainA != "chain -174 log2.csv 0.4" & stability.accross.chains$chainB != "chain -174 log2.csv 0.4",]
dx = dx[complete.cases(dx),]
dx = dx[dx$distance< (mean(dx$distance)+(2*sd(dx$distance))),]
summary(lm(distance~curvature*gen, data=dx))
m0 = lmer(distance~ 1 + (1|chainA) + (1|chainB),data=dx)
m1 = lmer(distance~ curvature + (1|chainA) + (1|chainB),data=dx)
m2 = lmer(distance~ curvature+gen + (1|chainA) + (1|chainB),data=dx)
m3 = lmer(distance~ curvature*gen + (1|chainA) + (1|chainB),data=dx)
anova(m0,m1,m2,m3)
par(mfrow=c(1,1))
plotmeans(distance~curvature,data=dx)
par(mfrow=c(3,2))
for(cx in sort(unique(dx$curvature))){
plotmeans(distance~gen,  data = dx[dx$curvature==cx,],ylim=range(dx$distance))
}
summary(lm(distance~curvature*gen, data=dx))
getSignalX =function(x){
as.numeric(strsplit(x,"_")[[1]])
}
getSimilarityAcrossChains.straight = function(d1,d2){
# calculate dtw distance for all pairs of signals
# work out the pairing of signals that minimises the distance
if(sum(is.na(d2))>1 | sum(is.na(d1))>1 | length(d1)==0 | length(d2)==0){
return(NA)
}
d1.s = sapply(d1,getSignalX)
d2.s = sapply(d2,getSignalX)
if(length(d1.s)==3 & length(d2.s)==3){
for(i in 1:3){
dist = dtw(d1.s[[i]],d2.s[[j]],distance.only = T)
return(dist$distance / max(c(length(d1.s[[i]]),length(d2.s[[j]]))))
}
} else{
return(NA)
}
}
getSimilarityAcrossChains = function(d1,d2){
if(sum(is.na(d2))>1 | sum(is.na(d1))>1 | length(d1)==0 | length(d2)==0){
return(NA)
}
d1.s = sapply(d1,getSignalX)
d2.s = sapply(d2,getSignalX)
dist = matrix(nrow=length(d1.s),ncol=length(d2.s))
for(i in 1:length(d1.s)){
for(j in 1:length(d2.s)){
distx = c(distance=Inf)
try(distx<-dtw(d1.s[[i]],d2.s[[j]], distance.only=T))
# normalise by length of longest signal
dist[i,j] = distx$distance #/ max(c(length(d1.s[[i]]),length(d2.s[[j]])))
}
}
if(sum(duplicated(dist))>0){
dist = dist + rnorm()*0.001
}
#apply(dist,1,function(X){which(X==min(X))})
# find minimal matches with greedy algorithm
foundMatches.d1 = c()
foundMatches.d2 = c()
#matches= matrix(nrow=nrow(dist),ncol=2)
return.distances = c()
xx = 1
for(dist.val in sort(dist)){
mx = which(dist==dist.val,arr.ind=T)
#if(mx[1]!=mx[2]){
if(!mx[1] %in% foundMatches.d1 & !mx[2] %in% foundMatches.d2){
foundMatches.d1 = c(foundMatches.d1,mx[1])
foundMatches.d2 = c(foundMatches.d2,mx[2])
#matches[xx,] = mx
#xx = xx+1
return.distances = c(return.distances,dist.val)
}
#}
}
#for(i in 1:nrow(matches)){
#  dist[matches[i,1],matches[i,2]]
#}
return(return.distances)
}
stability.accross.chains = data.frame(run=NA,gen=NA,curvature=NA,chainA=NA,chainB=NA,distance=NA)
list.names = c("MT","SONA","Nij")
data.list = list(signals_MT,signals_SONA,signals_Nij)
for(i in 1:length(data.list)){
sigx = data.list[[i]]
for(curvx in sort(unique(sigx$curvature))){
sigx2 = sigx[sigx$curvature==curvx,]
for(gen in sort(unique(sigx2$gen))){
sigx3 = sigx2[sigx2$gen==gen,]
chains = unique(sigx3$chain2)
if(length(chains)>1){
for(chA in 1:(length(chains)-1)){
for(chB in (chA+1):length(chains)){
d1 = sigx3[ sigx3$chain2==chains[chA],]$physSignal
d2 = sigx3[ sigx3$chain2==chains[chB],]$physSignal
sx = getSimilarityAcrossChains.straight(d1,d2)
stability.accross.chains = rbind(stability.accross.chains,c(list.names[[i]], gen,curvx, chains[chA],chains[chB],sum(sx)))
}
}
}
}
}
}
stability.accross.chains = stability.accross.chains[!is.na(stability.accross.chains$gen),]
stability.accross.chains$gen = as.numeric(stability.accross.chains$gen)
stability.accross.chains$distance = as.numeric(stability.accross.chains$distance)
stability.accross.chains$curvature = as.numeric(stability.accross.chains$curvature)
dx = stability.accross.chains[stability.accross.chains$run=="MT" ,]#=& stability.accross.chains$chainA != "chain -174 log2.csv 0.4" & stability.accross.chains$chainB != "chain -174 log2.csv 0.4",]
dx = dx[complete.cases(dx),]
dx = dx[dx$distance< (mean(dx$distance)+(2*sd(dx$distance))),]
summary(lm(distance~curvature*gen, data=dx))
m0 = lmer(distance~ 1 + (1|chainA) + (1|chainB),data=dx)
m1 = lmer(distance~ curvature + (1|chainA) + (1|chainB),data=dx)
m2 = lmer(distance~ curvature+gen + (1|chainA) + (1|chainB),data=dx)
m3 = lmer(distance~ curvature*gen + (1|chainA) + (1|chainB),data=dx)
anova(m0,m1,m2,m3)
par(mfrow=c(1,1))
plotmeans(distance~curvature,data=dx)
par(mfrow=c(3,2))
for(cx in sort(unique(dx$curvature))){
plotmeans(distance~gen,  data = dx[dx$curvature==cx,],ylim=range(dx$distance))
}
par(mfrow=c(3,2),bg='white')
for(cx in sort(unique(dx$curvature))){
plotmeans(distance~gen,  data = dx[dx$curvature==cx,],ylim=range(dx$distance))
}
?plotmeans
plotmeans(distance~gen,  data = dx[dx$curvature==cx,],ylim=range(dx$distance),n.label=F, bars=F)
par(mfrow=c(3,2),bg='white')
for(cx in sort(unique(dx$curvature))){
plotmeans(distance~gen,  data = dx[dx$curvature==cx,],ylim=range(dx$distance),n.label=F, bars=F)
}
stability.accross.chains = data.frame(run=NA,gen=NA,curvature=NA,chainA=NA,chainB=NA,distance=NA)
list.names = c("MT","SONA","Nij")
data.list = list(signals_MT,signals_SONA,signals_Nij)
for(i in 1:length(data.list)){
sigx = data.list[[i]]
for(curvx in sort(unique(sigx$curvature))){
sigx2 = sigx[sigx$curvature==curvx,]
for(gen in sort(unique(sigx2$gen))){
sigx3 = sigx2[sigx2$gen==gen,]
chains = unique(sigx3$chain2)
if(length(chains)>1){
for(chA in 1:(length(chains)-1)){
for(chB in (chA+1):length(chains)){
d1 = sigx3[ sigx3$chain2==chains[chA],]$physSignal
d2 = sigx3[ sigx3$chain2==chains[chB],]$physSignal
sx = getSimilarityAcrossChains(d1,d2)
stability.accross.chains = rbind(stability.accross.chains,c(list.names[[i]], gen,curvx, chains[chA],chains[chB],sum(sx)))
}
}
}
}
}
}
stability.accross.chains = stability.accross.chains[!is.na(stability.accross.chains$gen),]
stability.accross.chains$gen = as.numeric(stability.accross.chains$gen)
stability.accross.chains$distance = as.numeric(stability.accross.chains$distance)
stability.accross.chains$curvature = as.numeric(stability.accross.chains$curvature)
dx = stability.accross.chains[stability.accross.chains$run=="MT" ,]#=& stability.accross.chains$chainA != "chain -174 log2.csv 0.4" & stability.accross.chains$chainB != "chain -174 log2.csv 0.4",]
dx = dx[complete.cases(dx),]
dx = dx[dx$distance< (mean(dx$distance)+(2*sd(dx$distance))),]
summary(lm(distance~curvature*gen, data=dx))
m0 = lmer(distance~ 1 + (1|chainA) + (1|chainB),data=dx)
m1 = lmer(distance~ curvature + (1|chainA) + (1|chainB),data=dx)
m2 = lmer(distance~ curvature+gen + (1|chainA) + (1|chainB),data=dx)
m3 = lmer(distance~ curvature*gen + (1|chainA) + (1|chainB),data=dx)
anova(m0,m1,m2,m3)
par(mfrow=c(1,1))
plotmeans(distance~curvature,data=dx)
par(mfrow=c(3,2),bg='white')
for(cx in sort(unique(dx$curvature))){
plotmeans(distance~gen,  data = dx[dx$curvature==cx,],ylim=range(dx$distance),n.label=F, bars=F, xlab='Signal Distance')
}
dx = stability
m0 = lmer(dtw.dist~1 + (1 | chain) + (1|run), data=dx)
m1 = lmer(dtw.dist~curvature + (1 | chain)+ (1|run), data=dx)
m2 = lmer(dtw.dist~curvature + gen + (1 | chain)+ (1|run), data=dx)
m3= lmer(dtw.dist~curvature*gen + (1 | chain)+ (1|run), data=dx)
anova(m0,m1,m2,m3)
head(stability)
dx = stability[stability$run=="MT",]
m0 = lmer(dtw.dist~1 + (1 | chain) + (1|run), data=dx)
m1 = lmer(dtw.dist~curvature + (1 | chain)+ (1|run), data=dx)
m2 = lmer(dtw.dist~curvature + gen + (1 | chain)+ (1|run), data=dx)
m3= lmer(dtw.dist~curvature*gen + (1 | chain)+ (1|run), data=dx)
anova(m0,m1,m2,m3)
dx = stability[stability$run=="MT" & stability$curvature!=0.4,]
m0 = lmer(dtw.dist~1 + (1 | chain) + (1|run), data=dx)
m1 = lmer(dtw.dist~curvature + (1 | chain)+ (1|run), data=dx)
m2 = lmer(dtw.dist~curvature + gen + (1 | chain)+ (1|run), data=dx)
m3= lmer(dtw.dist~curvature*gen + (1 | chain)+ (1|run), data=dx)
anova(m0,m1,m2,m3)
dx = stability[stability$run=="MT" & stability$curvature!=0.4,]
m0 = lmer(dtw.dist~1 + (1 | chain) + (1|run), data=dx)
dx = stability[stability$run=="MT" & stability$curvature!=0.4,]
m0 = lmer(dtw.dist~1 + (1 | chain), data=dx)
m1 = lmer(dtw.dist~curvature + (1 | chain), data=dx)
m2 = lmer(dtw.dist~curvature + gen + (1 | chain), data=dx)
m3= lmer(dtw.dist~curvature*gen + (1 | chain), data=dx)
anova(m0,m1,m2,m3)
dx = stability[stability$run=="MT",]
m0 = lmer(dtw.dist~1 + (1 | chain), data=dx)
m1 = lmer(dtw.dist~curvature + (1 | chain), data=dx)
m2 = lmer(dtw.dist~curvature + gen + (1 | chain), data=dx)
m3= lmer(dtw.dist~curvature*gen + (1 | chain), data=dx)
anova(m0,m1,m2,m3)
plotmeans(dtw.dist~curvature,data=stability[stability$run=="MT",])
allData = rbind(signals_MT,signals_SONA)
allData = allData[allData$meaning==3,]
allData = allData[,c("length","averageSlope","propZero",'switches','maxslope','slope.move','jerkyness','curvature','gen','meaning','run','prop.time.plateau')]
allData$run = as.factor(allData$run)
allData$meaning = as.factor(allData$meaning)
ctx = ctree(curvature ~ ., data=allData, controls=ctree_control(mincriterion = 0.1))
plot(ctx, terminal_panel=node_barplot)
allData = rbind(signals_MT)#rbind(signals_MT,signals_SONA)
allData = allData[allData$meaning==3,]
allData = allData[,c("length","averageSlope","propZero",'switches','maxslope','slope.move','jerkyness','curvature','gen','meaning','run','prop.time.plateau')]
allData$run = as.factor(allData$run)
allData$meaning = as.factor(allData$meaning)
ctx = ctree(curvature ~ ., data=allData, controls=ctree_control(mincriterion = 0.1))
plot(ctx, terminal_panel=node_barplot)
allData = rbind(signals_MT)#rbind(signals_MT,signals_SONA)
allData = allData[allData$meaning==3,]
allData = allData[,c("averageSlope","propZero",'switches','maxslope','slope.move','jerkyness','curvature','gen','meaning','run','prop.time.plateau')]
allData$run = as.factor(allData$run)
allData$meaning = as.factor(allData$meaning)
ctx = ctree(curvature ~ ., data=allData, controls=ctree_control(mincriterion = 0.1))
plot(ctx, terminal_panel=node_barplot)
stability.accross.chains
stree = ctree(distance~gen+curvature,data=dx)
dx = stability.accross.chains[stability.accross.chains$run=="MT" ,]
stree = ctree(distance~gen+curvature,data=dx)
plot(stree)
stree = ctree(distance~gen+curvature,data=dx, controls = ctree_control(mincriterion = 0.5))
plot(stree)
stree = ctree(distance~gen+curvature,data=dx, controls = ctree_control(mincriterion = 0.9))
plot(stree)
stree = ctree(distance~gen+curvature,data=dx, controls = ctree_control(mincriterion = 0.8))
plot(stree)
stree = ctree(distance~gen+curvature,data=dx, controls = ctree_control(mincriterion = 0.7))
plot(stree)
stree = ctree(distance~gen+curvature,data=dx)
plot(stree)
m0 = lmer(distance~ 1 + (1|chainA) + (1|chainB),data=dx)
m1 = lmer(distance~ curvature + (1|chainA) + (1|chainB),data=dx)
m2 = lmer(distance~ curvature+gen + (1|chainA) + (1|chainB),data=dx)
m3 = lmer(distance~ curvature*gen + (1|chainA) + (1|chainB),data=dx)
anova(m0,m1,m2,m3)
dx$
m0 = lmer(distance~ 1 + (1|chainA) + (1|chainB),data=dx)
m1 = lmer(distance~ log(curvature) + (1|chainA) + (1|chainB),data=dx)
m2 = lmer(distance~ log(curvature)+gen + (1|chainA) + (1|chainB),data=dx)
m3 = lmer(distance~ log(curvature)*gen + (1|chainA) + (1|chainB),data=dx)
anova(m0,m1,m2,m3)
m0 = lmer(distance~ 1 + (1|chainA) + (1|chainB),data=dx)
m1 = lmer(distance~ log(curvature) + (1|chainA) + (1|chainB),data=dx)
m0 = lmer(distance~ 1 + (1|chainA) + (1|chainB),data=dx)
m1 = lmer(distance~ log(curvature+0.1) + (1|chainA) + (1|chainB),data=dx)
m2 = lmer(distance~ log(curvature+0.1)+gen + (1|chainA) + (1|chainB),data=dx)
m3 = lmer(distance~ log(curvature+0.1)*gen + (1|chainA) + (1|chainB),data=dx)
anova(m0,m1,m2,m3)
m0 = lmer(distance~ 1 + (1|chainA) + (1|chainB),data=dx)
m1 = lmer(distance~ I(log(curvature+0.1)) + (1|chainA) + (1|chainB),data=dx)
m2 = lmer(distance~ I(log(curvature+0.1))+gen + (1|chainA) + (1|chainB),data=dx)
m3 = lmer(distance~ I(log(curvature+0.1))*gen + (1|chainA) + (1|chainB),data=dx)
anova(m0,m1,m2,m3)
m0 = lmer(distance~ 1 + (1|chainA) + (1|chainB),data=dx)
m1 = lmer(distance~ I((curvature+0.1)^2) + (1|chainA) + (1|chainB),data=dx)
m2 = lmer(distance~ I((curvature+0.1)^2)+gen + (1|chainA) + (1|chainB),data=dx)
m3 = lmer(distance~ I((curvature+0.1)^2)*gen + (1|chainA) + (1|chainB),data=dx)
anova(m0,m1,m2,m3)
setwd("/Library/WebServer/Documents/ILMTurk/stats/upsid")
list.files(".",'*.txt')
i  = list.files(".",'*.txt')[1]
d = readLines(i)
?grep
grep("The '([a-zA-Z ]+)' sounds",d)
grep("The '([a-zA-Z ]+)' sounds",d,value=T)
gregexpr("The '([a-zA-Z ]+)' sounds",d,value=T)
gregexpr("The '([a-zA-Z ]+)' sounds")
gregexpr("The '([a-zA-Z ]+)' sounds",d)
x = gregexpr("The '([a-zA-Z ]+)' sounds",d)
x[[1]]
x = regexpr("The '([a-zA-Z ]+)' sounds",d)
x[[1]]
x
x = grep("The '([a-zA-Z ]+)' sounds",d,value=T)
x
d = readLines(i)
x = grep("The '([a-zA-Z ]+)' sounds",d,value=T)
x
splitstr(x,"'")
strsplit(x,"'")
d[length(d)]
d[length(d)-1]
strsplit(x2)
x2 = d[length(d)-1]
strsplit(x2)
x2 = d[length(d)-1]
strsplit(x2," ")
setwd("/Library/WebServer/Documents/ILMTurk/stats/upsid")
res = data.frame(position=NA,n=NA,p=NA)
for(i in list.files(".",'*.txt')){
d = readLines(i)
d = d[nchar(d)>0,]
x = grep("The '([a-zA-Z ]+)' sounds",d,value=T)
position = strsplit(x,"'")[2]
x2 = d[length(d)]
x2 = strsplit(x2," ")
nSounds = as.numeric(x2[2])
pSounds = as.numeric(x2[5])
res = rbind(res,c(position,nSounds,pSounds))
}
setwd("/Library/WebServer/Documents/ILMTurk/stats/upsid")
res = data.frame(position=NA,n=NA,p=NA)
for(i in list.files(".",'*.txt')){
d = readLines(i)
d = d[nchar(d)>0]
x = grep("The '([a-zA-Z ]+)' sounds",d,value=T)
position = strsplit(x,"'")[2]
x2 = d[length(d)]
x2 = strsplit(x2," ")
nSounds = as.numeric(x2[2])
pSounds = as.numeric(x2[5])
res = rbind(res,c(position,nSounds,pSounds))
}
i
d = readLines(i)
d = d[nchar(d)>0]
x = grep("The '([a-zA-Z ]+)' sounds",d,value=T)
position = strsplit(x,"'")[2]
x2 = d[length(d)]
x2 = strsplit(x2," ")
nSounds = as.numeric(x2[2])
x2[2]
d = readLines(i)
d = d[nchar(d)>0]
x = grep("The '([a-zA-Z ]+)' sounds",d,value=T)
position = strsplit(x,"'")[[1]][2]
x2 = d[length(d)]
x2 = strsplit(x2," ")[[1]]
nSounds = as.numeric(x2[2])
pSounds = as.numeric(x2[5])
res = rbind(res,c(position,nSounds,pSounds))
x2
as.numeric(x2[2])
as.numeric(x2[5])
x2[5]
as.numeric(gsub("%","",x2[5]))
setwd("/Library/WebServer/Documents/ILMTurk/stats/upsid")
res = data.frame(position=NA,n=NA,p=NA)
for(i in list.files(".",'*.txt')){
d = readLines(i)
d = d[nchar(d)>0]
x = grep("The '([a-zA-Z ]+)' sounds",d,value=T)
position = strsplit(x,"'")[[1]][2]
x2 = d[length(d)]
x2 = strsplit(x2," ")[[1]]
nSounds = as.numeric(x2[2])
pSounds = as.numeric(gsub("%","",x2[5]))
res = rbind(res,c(position,nSounds,pSounds))
}
i
d = readLines(i)
d = d[nchar(d)>0]
d
setwd("/Library/WebServer/Documents/ILMTurk/stats/upsid")
res = data.frame(position=NA,n=NA,p=NA)
for(i in list.files(".",'*.txt')){
d = readLines(i)
d = d[nchar(d)>0]
x = grep("The '([a-zA-Z /]+)' sounds",d,value=T)
position = strsplit(x,"'")[[1]][2]
x2 = d[length(d)]
x2 = strsplit(x2," ")[[1]]
nSounds = as.numeric(x2[2])
pSounds = as.numeric(gsub("%","",x2[5]))
res = rbind(res,c(position,nSounds,pSounds))
}
d[1]
setwd("/Library/WebServer/Documents/ILMTurk/stats/upsid")
res = data.frame(position=NA,n=NA,p=NA)
for(i in list.files(".",'*.txt')){
d = readLines(i)
d = d[nchar(d)>0]
x = d[1]#grep("The '([a-zA-Z /]+)' sounds",d,value=T)
position = strsplit(x,"'")[[1]][2]
x2 = d[length(d)]
x2 = strsplit(x2," ")[[1]]
nSounds = as.numeric(x2[2])
pSounds = as.numeric(gsub("%","",x2[5]))
res = rbind(res,c(position,nSounds,pSounds))
}
res
barplot(rev(res$p))
barplot(rev(res$p))
res$p = as.numeric(res$p)
res$n = as.numeric(res$n)
barplot(rev(res$p))
par()
par(mfrow=c(1,1))
res$p = as.numeric(res$p)
res$n = as.numeric(res$n)
barplot(rev(res$p))
dim(res)
barplot(res$p)
barplot(res$p, col= 'red')
barplot(res$p, col= 'red',xaxt='n')
barplot(res$p, col= 'red',yaxt='n')
barplot(res$p, col= 'red')
barplot(res$p, col= 'red', xlab='% of sounds in UPSID')
barplot(res$p, col= 'red', ylab='% of sounds in UPSID')
par(bg=rbg(0,0,0,0))
barplot(res$p, col= 'red', ylab='% of sounds in UPSID')
par(bg=rgb(0,0,0,0))
barplot(res$p, col= 'red', ylab='% of sounds in UPSID')
barplot(res$p, col= 'red', ylab='',yaxt='n',border=NA)
barplot(res$p, col= 'red', ylab='',yaxt='n',border=NA)
barplot(res$p, col= 'red', ylab='',yaxt='n',border=NA)
res
res = res[!res$position%in%c("labial-palatal","labial-velar","velar-alveolar")]
par(bg=rgb(0,0,0,0))
barplot(res$p, col= 'red', ylab='',yaxt='n',border=NA)
barplot(res$p, col= 'red', ylab='',yaxt='n',border=NA)
res = res[!res$position%in%c("labial-palatal","labial-velar","velar-alveolar"),]
par(bg=rgb(0,0,0,0))
barplot(res$p, col= 'red', ylab='',yaxt='n',border=NA)
barplot(res$p, col= 'red', ylab='',yaxt='n',border=NA)
res
setwd("/Library/WebServer/Documents/ILMTurk/stats/upsid")
res = data.frame(position=NA,nLangs=NA,n=NA,p=NA)
for(i in list.files(".",'*.txt')){
d = readLines(i)
nLangs = strsplit(d[which(nchar(d)==0)[3]+1]," ")[[1]][2]
d = d[nchar(d)>0]
x = d[1]#grep("The '([a-zA-Z /]+)' sounds",d,value=T)
position = strsplit(x,"'")[[1]][2]
x2 = d[length(d)]
x2 = strsplit(x2," ")[[1]]
nSounds = as.numeric(x2[2])
pSounds = as.numeric(gsub("%","",x2[5]))
res = rbind(res,c(position,nLangs,nSounds,pSounds))
}
res$p = as.numeric(res$p)
res$n = as.numeric(res$n)
res$nLangs = as.numeric(res$nLangs)
res = res[!res$position%in%c("labial-palatal","labial-velar","velar-alveolar"),]
head(res)
dim(res)
res
cite("lme4")
cite(lme4)
?cite(lme4)
citation(lme4)
citation('lme4')

anova(m1,m3)
m4= lmer(prop.time.plateau.norm~
1 +
(1 + curvature.center | chain2) +
(1 + gen | meaning),
data = dx)
anova(m1,m4)
m0= lmer(physSigDistinctiveness.norm~
1 +
(1 | chain2) +
(1 | meaning),
data = dx)
m1= lmer(physSigDistinctiveness.norm~
1 +
(1 + curvature.center | chain2) +
(1 | meaning),
data = dx)
anova(m0,m1)
dx$physSigDistinctiveness.norm = dx$physSigDistinctiveness -
mean(dx$physSigDistinctiveness)
dx$physSigDistinctiveness.norm = dx$physSigDistinctiveness.norm /
abs(max(dx$physSigDistinctiveness.norm))
m0= lmer(physSigDistinctiveness.norm~
1 +
(1 | chain2) +
(1 | meaning),
data = dx)
m1= lmer(physSigDistinctiveness.norm~
1 +
(1 + curvature.center | chain2) +
(1 | meaning),
data = dx)
anova(m0,m1)
m2= lmer(physSigDistinctiveness.norm~
1 +
(1 + gen | chain2) +
(1 | meaning),
data = dx)
anova(m0,m2)
m3= lmer(physSigDistinctiveness.norm~
1 +
(1 + gen | chain2) +
(1 + curvature.center| meaning),
data = dx)
anova(m2,m3)
m4= lmer(physSigDistinctiveness.norm~
1 +
(1 + gen | chain2) +
(1 + gen | meaning),
data = dx)
anova(m2,m4)
m0= lmer(physSigDistinctiveness.norm~
1 +
(1 + gen | chain2) +
(1 | meaning),
data = dx)
# add curavture
m1= lmer(physSigDistinctiveness.norm~
1 +
curvature.center +
(1 + gen | chain2) +
(1 | meaning),
data = dx)
# add generation
m2= lmer(physSigDistinctiveness.norm~
1 +
curvature.center +
gen +
(1 + gen | chain2) +
(1 | meaning),
data = dx)
# add interaction between curvature and generation
m3= lmer(physSigDistinctiveness.norm~
1 +
curvature.center +
gen +
curvature : gen +
(1 + gen | chain2) +
(1 | meaning),
data = dx)
# Quadratic term of curvature
m4= lmer(physSigDistinctiveness.norm~
1 +
curvature.center +
gen +
curvature : gen +
I(curvature^2) +
(1 + gen | chain2) +
(1 | meaning),
data = dx)
# Interaction between quadratic term of curvature and generation
m5= lmer(physSigDistinctiveness.norm~
1 +
curvature.center +
gen +
curvature : gen +
I(curvature^2) +
I(curvature^2):gen +
(1 + gen | chain2) +
(1 | meaning),
data = dx)
anova(m0,m1,m2,m3,m4,m5)
plotmeans(dx[dx$meaning==1,]$numLearningRounds~dx[dx$meaning==1,]$curvature)
plotmeans(dx[dx$meaning==1,]$numLearningRounds~dx[dx$meaning==1,]$gen)
plotmeans(dx[dx$meaning==1,]$abortedReproductionAttempts~dx[dx$meaning==1,]$curvature)
plotmeans(dx[dx$meaning==1,]$abortedReproductionAttempts~dx[dx$meaning==1,]$gen)
dx$steepness.sig.mean.max.norm = dx$steepness.sig.mean - mean(dx$steepness.sig.mean)
m0= lmer(steepness.sig.mean.max.norm~
1 +
(1 | chain2) +
(1 | meaning),
data = dx)
m1= lmer(steepness.sig.mean.max.norm~
1 +
(1 + curvature.center | chain2) +
(1 | meaning),
data = dx)
anova(m0,m1)
m2= lmer(steepness.sig.mean.max.norm~
1 +
(1 + curvature.center + gen | chain2) +
(1 | meaning),
data = dx)
anova(m1,m2)
m3= lmer(prop.time.plateau.norm~
1 +
(1 + curvature.center | chain2) +
(1 + curvature.center| meaning),
data = dx)
anova(m1,m3)
m4= lmer(prop.time.plateau.norm~
1 +
(1 + curvature.center | chain2) +
(1 + gen | meaning),
data = dx)
anova(m1,m4)
m2= lmer(steepness.sig.mean.max.norm~
1 +
(1 + curvature.center + gen | chain2) +
(1 | meaning),
data = dx)
anova(m1,m2)
m3= lmer(prop.time.plateau.norm~
1 +
(1 + curvature.center + gen | chain2) +
(1 + curvature.center| meaning),
data = dx)
anova(m2,m3)
m4= lmer(prop.time.plateau.norm~
1 +
(1 + curvature.center + gen | chain2) +
(1 + gen | meaning),
data = dx)
anova(m2,m4)
m0= lmer(steepness.sig.mean.max.norm~
1 +
(1 + curvature.center + gen | chain2) +
(1 | meaning),
data = dx)
# add curavture
m1= lmer(steepness.sig.mean.max.norm~
1 +
curvature.center +
(1 + curvature.center + gen | chain2) +
(1 | meaning),
data = dx)
# add generation
m2= lmer(steepness.sig.mean.max.norm~
1 +
curvature.center +
gen +
(1 + curvature.center + gen | chain2) +
(1 | meaning),
data = dx)
# add interaction between curvature and generation
m3= lmer(steepness.sig.mean.max.norm~
1 +
curvature.center +
gen +
curvature : gen +
(1 + curvature.center + gen | chain2) +
(1 | meaning),
data = dx)
# Quadratic term of curvature
m4= lmer(steepness.sig.mean.max.norm~
1 +
curvature.center +
gen +
curvature : gen +
I(curvature^2) +
(1 + curvature.center + gen | chain2) +
(1 | meaning),
data = dx)
# Interaction between quadratic term of curvature and generation
m5= lmer(steepness.sig.mean.max.norm~
1 +
curvature.center +
gen +
curvature : gen +
I(curvature^2) +
I(curvature^2):gen +
(1 + curvature.center + gen | chain2) +
(1 | meaning),
data = dx)
```
Use model comparison to test the effect of each variable.
```{r}
anova(m0,m1,m2,m3,m4,m5)
ing,
---
title: "Slide whistle stats"
output: pdf_document
---
```{r echo=F,message=F}
setwd("/Library/WebServer/Documents/ILMTurk/stats")
```
# Load libraries
```{r}
library(lme4)
library(infotheo)
library(lattice)
library(gplots)
```
# Introduction
In this document, I try and address two predictions.  (1) signallers avoid steep regions and (2) curvature affects variability. The approach is to use mixed effects models, with random effects for chain and target meaning, with random slopes as suggested by model comparison.
# Load data
```{r}
signals_MT = read.csv("../Data/Signals_MT.csv",stringsAsFactors=F)
signals_SONA = read.csv("../Data/Signals_SONA.csv",stringsAsFactors=F)
signals_MT$run = "MT"
signals_SONA$run = "SONA"
```
## Variables
A description of the variables included in the datasets:
-  averageSlope/averageSlope.hz:  average absolute difference in physical space/hz space between samples.  High value = lots of movement.  mean(abs(diff(sig)))
-  propZero/propZero.hz:  proportion of times in which the difference between sample values was negligible.  High value = lots of time standing still.  sum(diff(sig)<5) / length(sig
-  switches/switches.hz:  Number of changes in direction.  sum(abs((diff(diff(sig)>=0))))
-  maxslope/maxslope.hz:  Maximum change in singal.  max(abs(diff(sig)))
-  slope.move:  average slope change excluding zero.  mean(abs(diff(sig)[abs(diff(sig))>=5]))
-  jerkyness: standard deviation between derivative of signal.  Low value = smoothly changing signal.  sd(abs(diff(sig)))
-  prop.time.plateau:  Proportion of time spent in the plateau region (physical space only).  Steep regions are defined as: 0.1-0.3 and 0.5-0.7, all other values are plateau.  (the prop.time.plateau.hz variable should be ignored)
-  switches.between.sections:  If the signal space is divided into three plateau regions and two steep regions, the number of times the signal switches from one region to another.
-  steepness.sig.mean - the signal's average steepenss of curve.  For each change in a unit of physical space, what is the proportional change in hz space?  The steepness values are taken from the curve used to produce the signal.  So, any signal produced with zero curvature should have the same steepness.sig.mean (except that the hz scale is perceptually linear, so there may be small deviations).  The same signal drawn on different curvatures will have different values of steepness.sig.mean, in a way that's not easy to predict (high curvatures have more steep regions, but also more flat regions).
-  steepness.sig.mean.max - same as steepness.sig.mean, but where the steepenss values are taken from the maximum curvature steepness, to normalise over curvature values.
-  logfile:  The name of the log file used in the experiment
-  chain: chain number (according to the online server)
-  curvature:  value of the curvature c of the articulator mapping
-  run:  source of the data (MT = mechanical turk, SONA = SONA)
-  physSignal: the raw values of the physical signal recorded by the program, as a string of values separated by underscores.  Values are proportion of the way along the slider x 1000, where 0 is low and 1000 is high
-  hzSignal:  the raw values of the signal in hz played to the participant. Same format as above, but in hz.
-  numLearningRounds: the number of learning trials that the participant took to learn all 3 meanings (multiples of 3).  This is the total value for the participant, not per meaning.  For a given participant, this value is duplicated across the entries for each meaning.  (so to get the number of learning rounds for a given participant, you should just look at values for e.g. meaning==1)
-  abortedReproductionAttempts:  The total number of times a player retries to produce a signal.  As above, the number is reproduced over the 3 meanings.
-  physSigDistinctiveness:  How distinctive are the three signals that a participant produced?  Split the time/signal space into a 10 x 10 grid.  Count the number of appearances the signal makes in each cell to get a matrix of numbers that represents the journey of the signal.  Do that for each signal.  Then for each signal pair, calculate the absolute difference between the two matrices.  Two very different signals will produce a high value.  Two identical signals will produce a value of zero.  Note that, because the time dimension is considered, two signals with the same trajectory but different speeds will look different.  See the function "compareSignals" in GetData.R.
-  hzSigDistinctiveness: Same as above, but in hz space.
-  dataFileHzSignal:  The file where the raw data is stored.
-  dataFileHzSignal:  The file where the raw data is stored.
-  chain2: A unique identifier for the diffusion chain (chain number, log file, curvature).  This should be used instead of 'chain', because 'chain' can have identical chain numbers for different curvature values.
-  rawDataSource:  Source of the raw data.
# Prediction 1: Signallers avoid unstable regions
We predict speakers indeed will avoid unstable regions of the articulator for stronger biases, and instead use the stable (quantal) ones.  Moreover, we expect that the effect will become more pronounced as generations go by, that is, that nonlinear biases indeed get amplified over time.
Select dataset (use only MT for now):
```{r}
dx = signals_SONA
# remove cases without values
dx = dx[!is.na(dx$prop.time.plateau),]
```
Some stats:
```{r}
# Datapoints:
nrow(dx)
# Number of chains:
length(unique(dx$chain2))
# Number of participants:
length((unique(paste(dx$chain2,dx$gen))))
```
## Average time on the plateau
Plot average time on the plateau by curavture value.
```{r}
plotmeans(prop.time.plateau~curvature, data=dx, ylab="Proporiton of time on the plateau", xlab='Curvature')
```
Center variables.  Note that this changes the values of curvature and
```{r}
dx$prop.time.plateau.norm = dx$prop.time.plateau - mean(dx$prop.time.plateau)
dx$gen = dx$gen - 5
dx$curvature.center = dx$curvature - 0.2
```
```{r}
m0= lmer(prop.time.plateau.norm~
1 +
(1 | chain2) +
(1 | meaning),
data = dx)
m1= lmer(prop.time.plateau.norm~
1 +
(1 + curvature.center | chain2) +
(1 | meaning),
data = dx)
anova(m0,m1)
# No signficiant difference
m2= lmer(prop.time.plateau.norm~
1 +
(1 +  gen | chain2) +
(1 | meaning),
data = dx)
anova(m0,m2)
# Yes, keep
m3= lmer(prop.time.plateau.norm~
1 +
(1 + gen | chain2) +
(1 + curvature.center| meaning),
data = dx)
anova(m2,m3)
# No significant improvement
m4= lmer(prop.time.plateau.norm~
1 +
(1 + gen | chain2) +
(1 + gen | meaning),
data = dx)
anova(m2,m4)
m0= lmer(prop.time.plateau.norm~
1 +
(1 | chain2) +
(1 | meaning),
data = dx)
# add curavture
m1= lmer(prop.time.plateau.norm~
1 +
curvature.center +
(1  | chain2) +
(1 | meaning),
data = dx)
# add generation
m2= lmer(prop.time.plateau.norm~
1 +
curvature.center +
gen +
(1 | chain2) +
(1 | meaning),
data = dx,
control = lmerControl(optimizer = "Nelder_Mead", optCtrl = list(maxfun=500000)))
# add interaction between curvature and generation
m3= lmer(prop.time.plateau.norm~
1 +
curvature.center +
gen +
curvature : gen +
(1  | chain2) +
(1 | meaning),
data = dx)
# Quadratic term of curvature
m4= lmer(prop.time.plateau.norm~
1 +
curvature.center +
gen +
curvature : gen +
I(curvature^2) +
(1 | chain2) +
(1 | meaning),
data = dx)
# Interaction between quadratic term of curvature and generation
m5= lmer(prop.time.plateau.norm~
1 +
curvature.center +
gen +
curvature : gen +
I(curvature^2) +
I(curvature^2):gen +
(1 | chain2) +
(1 | meaning),
data = dx)
anova(m0,m1,m2,m3,m4,m5)
summary(m1)
dx$steepness.sig.mean.max.norm = dx$steepness.sig.mean.max - mean(dx$steepness.sig.mean.max)
```
plotmeans(steepness.sig.mean.max~curvature, data=dx, ylab="Mean signal steepness", xlab='Curvature')
m0= lmer(steepness.sig.mean.max.norm~
1 +
(1 | chain2) +
(1 | meaning),
data = dx)
m1= lmer(steepness.sig.mean.max.norm~
1 +
(1 + curvature.center | chain2) +
(1 | meaning),
data = dx)
anova(m0,m1)
m2= lmer(steepness.sig.mean.max.norm~
1 +
(1 + curvature.center + gen | chain2) +
(1 | meaning),
data = dx)
anova(m1,m2)
m3= lmer(prop.time.plateau.norm~
1 +
(1 + curvature.center | chain2) +
(1 + curvature.center| meaning),
data = dx)
anova(m1,m3)
# No significant improvement
m4= lmer(prop.time.plateau.norm~
1 +
(1 + curvature.center | chain2) +
(1 + gen | meaning),
data = dx)
anova(m1,m4)
, but
m0= lmer(steepness.sig.mean.max.norm~
1 +
(1 + curvature.center | chain2) +
(1 | meaning),
data = dx)
# add curavture
m1= lmer(steepness.sig.mean.max.norm~
1 +
curvature.center +
(1 + curvature.center | chain2) +
(1 | meaning),
data = dx)
# add generation
m2= lmer(steepness.sig.mean.max.norm~
1 +
curvature.center +
gen +
(1 + curvature.center | chain2) +
(1 | meaning),
data = dx)
# add interaction between curvature and generation
m3= lmer(steepness.sig.mean.max.norm~
1 +
curvature.center +
gen +
curvature : gen +
(1 + curvature.center | chain2) +
(1 | meaning),
data = dx)
# Quadratic term of curvature
m4= lmer(steepness.sig.mean.max.norm~
1 +
curvature.center +
gen +
curvature : gen +
I(curvature^2) +
(1 + curvature.center | chain2) +
(1 | meaning),
data = dx)
# Interaction between quadratic term of curvature and generation
m5= lmer(steepness.sig.mean.max.norm~
1 +
curvature.center +
gen +
curvature : gen +
I(curvature^2) +
I(curvature^2):gen +
(1 + curvature.center | chain2) +
(1 | meaning),
data = dx)
anova(m0,m1,m2,m3,m4,m5)
dx = dx[dx$curvature<0.3,]
m0= lmer(steepness.sig.mean.max.norm~
1 +
(1 + curvature.center | chain2) +
(1 | meaning),
data = dx)
# add curavture
m1= lmer(steepness.sig.mean.max.norm~
1 +
curvature.center +
(1 + curvature.center | chain2) +
(1 | meaning),
data = dx)
# add generation
m2= lmer(steepness.sig.mean.max.norm~
1 +
curvature.center +
gen +
(1 + curvature.center | chain2) +
(1 | meaning),
data = dx)
# add interaction between curvature and generation
m3= lmer(steepness.sig.mean.max.norm~
1 +
curvature.center +
gen +
curvature : gen +
(1 + curvature.center | chain2) +
(1 | meaning),
data = dx)
# Quadratic term of curvature
m4= lmer(steepness.sig.mean.max.norm~
1 +
curvature.center +
gen +
curvature : gen +
I(curvature^2) +
(1 + curvature.center | chain2) +
(1 | meaning),
data = dx)
# Interaction between quadratic term of curvature and generation
m5= lmer(steepness.sig.mean.max.norm~
1 +
curvature.center +
gen +
curvature : gen +
I(curvature^2) +
I(curvature^2):gen +
(1 + curvature.center | chain2) +
(1 | meaning),
data = dx)
```
Use model comparison to test the effect of each variable.
```{r}
anova(m0,m1,m2,m3,m4,m5)
